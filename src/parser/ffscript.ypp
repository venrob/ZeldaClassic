/* -*- mode: bison; tab-width: 4 -*-
 * Parser for the scripting language compiler. Intended for use with Flex
 * and Bison. Use this file to generate y.tab.cpp:
 * $ bison -b y -v -d ffscript.ypp
 */

/* declarations */
%{
#include "../precompiled.h"
#include <stdlib.h>
#include <stdio.h>
#include <cassert>
#include <string>
#include <sstream>
#include "ASTVisitors.h"
#include "CompileOption.h"	
#include "../zsyssimple.h"

using std::string;
using std::ostringstream;
using namespace ZScript;

#define YYINCLUDED_STDLIB_H
extern int yydebug;
extern int yyrow;
extern int yycol;
extern char* yytext;
extern int yyleng;
extern int yylex(void);
extern FILE *yyin;
extern void resetLexer();
void yyerror(ASTFile*& root, const char* s);
void yymsg(string const& message, int row = yyrow, int col = yycol);
std::string curfilename;
extern YYLTYPE noloc;


// Since c macros can't directly contain bison macros, they need to be passed
// in where they're invoked. The following arguments are named so that 'd'
// stands in for '$' and 'a' stands in for '@'.

#define PREFIX(klass, dd, d2, ad) \
	klass* prefix = new klass(ad); \
	ASTExpr* operand = (ASTExpr*)d2; \
	prefix->operand = operand; \
	dd = prefix;

#define POSTFIX(klass, dd, d1, ad) \
	klass* postfix = new klass(ad); \
	ASTExpr* operand = (ASTExpr*)d1; \
	postfix->operand = operand; \
	dd = postfix;

#define BINARY(klass, dd, d1, d3, ad) \
	ASTExpr* left = (ASTExpr*)d1; \
	ASTExpr* right = (ASTExpr*)d3; \
	dd = new klass(left, right, ad);

#define SHORTCUT(klass, dd, d1, d3, ad, a3)		\
	ASTExpr* left = (ASTExpr*)d1; \
	ASTExpr* right = (ASTExpr*)d3; \
	klass* rval = new klass(left->clone(), right, a3);	\
	dd = new ASTExprAssign(left, rval, ad);

%}

%code requires {
	namespace ZScript
	{
		class ASTFile;
		ASTFile* parseFile(std::string const& filename);
	};
}

%glr-parser
%expect 1
%expect-rr 26
%error-verbose
%start Init
%parse-param {ZScript::ASTFile*& root}

%define api.token.prefix {TOK_}

 // Keywords
%token SCRIPT
%token FOR
%token IF
%token ELSE
%token SWITCH
%token CASE
%token DEFAULT
%token RETURN
%token IMPORT
%token ZTRUE
%token ZFALSE
%token WHILE
%token GLOBAL
%token BREAK
%token CONTINUE
%token ZCONST
%token DO
%token TYPEDEF
%token EXPECTERROR
%token OPTIONVALUE
%token DEFINE

 // Types
%token ZVOID
%token UNTYPED
%token ZBOOL
%token ZFLOAT
%token BITMAP
%token CHEAT
%token COMBO
%token DOORSET
%token DROPSET
%token DMAP
%token EWEAPON
%token FFC
%token GAMEDATA
%token ITEM
%token ITEMCLASS
%token LWEAPON
%token MAP
%token MESSAGE
%token MISCCOLOR
%token NPC
%token NPCDATA
%token PALCYCLE
%token PALETTE
%token POND
%token RGB
%token SHOP
%token SPRITE
%token TUNE
%token WARPRING
%token SCREEN
%token PLAYER
%token LINK

 // Syntax
%token COMMA
%token DOT
%token SEMICOLON
%token COLON
%token LPAREN
%token RPAREN
%token LBRACKET
%token RBRACKET
%token LBRACE
%token RBRACE
%token QMARK

 // Operators
%token ARROW
%left INCREMENT DECREMENT
%left NOT BITNOT
%left TIMES DIVIDE MODULO
%left PLUS MINUS
%left LSHIFT RSHIFT
%left LE LT GE GT EQ NE
%left BITAND BITXOR BITOR
%left AND OR
%token ASSIGN
%token PLUSASSIGN
%token MINUSASSIGN
%token TIMESASSIGN
%token DIVIDEASSIGN
%token MODULOASSIGN
%token LSHIFTASSIGN
%token RSHIFTASSIGN
%token BITANDASSIGN
%token BITXORASSIGN
%token BITORASSIGN
%token ANDASSIGN
%token ORASSIGN

 // Hash Only
%token HASH
%token ENDLINE
%token OPTION
%token INHERIT

 // Others
%token IDENTIFIER
%token QUOTEDSTRING
%token IMPORTSTRING
%token SINGLECHAR
%token NUMBER

%%

////////////////////////////////////////////////////////////////
	
Init : Global_List {$$ = $1;};

////////////////////////////////////////////////////////////////
// Global

Global_List :
	Global_List Global_Statement {
		ASTDecl* declaration = (ASTDecl*)$2;
		root->addDeclaration(declaration);}
	| Global_List Option {
		ASTSetOption* option = (ASTSetOption*)$2;
		root->options.push_back(option);
		if (root->hasDeclarations())
			yymsg("WARNING: Options should come before everything else.");}
	| {root = new ASTFile(noloc);}
	;

Global_Statement :
	Import {$$ = $1;}
	| DataTypeDef SEMICOLON {$$ = $1;}
	| ScriptTypeDef SEMICOLON {$$ = $1;}
	| Data SEMICOLON {$$ = $1;}
	| Function {$$ = $1;}
	| Script {$$ = $1;}
	| EXPECTERROR LPAREN Expression_Constant RPAREN Global_Statement {
		ASTExprConst* errorId = (ASTExprConst*)$3;
		ASTDecl* declaration = (ASTDecl*)$5;
		declaration->compileErrorCatches.push_back(errorId);
		$$ = declaration;}
	;

////////////////////////////////////////////////////////////////
// Import Declaration

Import : IMPORT IMPORTSTRING {
	ASTString* str = (ASTString*)$2;
	$$ = new ASTImportDecl(str->getValue(), @$);
	delete str;}
	;

////////////////////////////////////////////////////////////////
// Compile Option

Option :
	HASH OPTION IDENTIFIER Expression_Constant ENDLINE {
		ASTString* name = (ASTString*)$3;
		ASTExprConst* expr = (ASTExprConst*)$4;
		$$ = new ASTSetOption(name->getValue(), expr, @$);
		delete name;}
	| HASH OPTION IDENTIFIER INHERIT ENDLINE {
		ASTString* name = (ASTString*)$3;
		$$ = new ASTSetOption(
				name->getValue(), CompileOptionSetting::Inherit, @$);
		delete name;}
	| HASH OPTION IDENTIFIER DEFAULT ENDLINE {
		ASTString* name = (ASTString*)$3;
		$$ = new ASTSetOption(
				name->getValue(), CompileOptionSetting::Default, @$);
		delete name;}
	;

////////////////////////////////////////////////////////////////
// Type Declaration

DataTypeDef : TYPEDEF DataType IDENTIFIER {
	ASTDataType* type = (ASTDataType*)$2;
	ASTString* name = (ASTString*)$3;
	$$ = new ASTDataTypeDef(type, name->getValue(), @1);
	delete name;}
	;

DataType :
	ZVOID {$$ = new ASTDataType(DataType::ZVOID, @$);}
	| UNTYPED {$$ = new ASTDataType(DataType::UNTYPED, @$);}
	| ZBOOL {$$ = new ASTDataType(DataType::BOOL, @$);}
	| ZFLOAT {$$ = new ASTDataType(DataType::FLOAT, @$);}
	| BITMAP {$$ = new ASTDataType(DataType::BITMAP, @$);}
	| CHEAT {$$ = new ASTDataType(DataType::CHEATS, @$);}
	| COMBO {$$ = new ASTDataType(DataType::COMBOS, @$);}
	| DOORSET {$$ = new ASTDataType(DataType::DOORSET, @$);}
	| DROPSET {$$ = new ASTDataType(DataType::DROPSET, @$);}
	| DMAP {$$ = new ASTDataType(DataType::DMAPDATA, @$);}
	| EWEAPON	{$$ = new ASTDataType(DataType::EWPN, @$);}
	| FFC {$$ = new ASTDataType(DataType::FFC, @$);}
	| GAMEDATA	{$$ = new ASTDataType(DataType::GAMEDATA, @$);}
	| ITEM {$$ = new ASTDataType(DataType::ITEM, @$);}
	| ITEMCLASS {$$ = new ASTDataType(DataType::ITEMCLASS, @$);}
	| LWEAPON {$$ = new ASTDataType(DataType::LWPN, @$);}
	| MAP {$$ = new ASTDataType(DataType::MAPDATA, @$);}
	| MESSAGE {$$ = new ASTDataType(DataType::ZMESSAGE, @$);}
	| MISCCOLOR {$$ = new ASTDataType(DataType::ZUICOLOURS, @$);}
	| NPC {$$ = new ASTDataType(DataType::NPC, @$);}
	| NPCDATA {$$ = new ASTDataType(DataType::NPCDATA, @$);}
	| PALCYCLE {$$ = new ASTDataType(DataType::PALCYCLE, @$);}
	| PALETTE {$$ = new ASTDataType(DataType::PALETTE, @$);}
	| POND {$$ = new ASTDataType(DataType::PONDS, @$);}
	| RGB {$$ = new ASTDataType(DataType::RGBDATA, @$);}
	| SHOP {$$ = new ASTDataType(DataType::SHOPDATA, @$);}
	| SPRITE {$$ = new ASTDataType(DataType::SPRITEDATA, @$);}
	| TUNE {$$ = new ASTDataType(DataType::TUNES, @$);}
	| WARPRING	{$$ = new ASTDataType(DataType::WARPRING, @$);}
	| IDENTIFIER {
			ASTString *name = (ASTString*)$1;
			$$ = new ASTDataType(DataTypeUnresolved(name->getValue()), @$);
			delete name;}
	| ZCONST ZFLOAT {$$ = new ASTDataType(new DataTypeConstFloat(), @$); }
	| ZCONST ZBOOL {$$ = new ASTDataType(new DataTypeConstFloat(), @$); }
	| ZCONST UNTYPED {$$ = new ASTDataType(new DataTypeConstFloat(), @$);}
	;

ScriptTypeDef : SCRIPT TYPEDEF Script_Type IDENTIFIER {
	ASTScriptType* oldType = static_cast<ASTScriptType*>($3);
	ASTString* newName = static_cast<ASTString*>($4);
	$$ = new ASTScriptTypeDef(oldType, newName->getValue(), @$);
	delete newName;}
	;

////////////////////////////////////////////////////////////////
// Data Declaration

Data : DataType Data_List {
		ASTDataType* type = (ASTDataType*)$1;
		ASTDataDeclList* list = (ASTDataDeclList*)$2;
		list->baseType = type;
		list->location = @$;
		$$ = list;}
	;

Data_List :
	Data_List COMMA Data_Element {
			ASTDataDeclList* list = (ASTDataDeclList*)$1;
			ASTDataDecl* element = (ASTDataDecl*)$3;
			list->addDeclaration(element);
			list->location = @$;
			$$ = list;}
	| Data_Element {
			ASTDataDecl* element = (ASTDataDecl*)$1;
			ASTDataDeclList* list = new ASTDataDeclList(@$);
			list->addDeclaration(element);
			$$ = list;}
	;

Data_Element :
	Data_Element_Array_List ASSIGN Expression {
			ASTDataDecl* element = (ASTDataDecl*)$1;
			ASTExpr* initializer = (ASTExpr*)$3;
			element->setInitializer(initializer);
			element->location = @$;
			$$ = element;}
	| Data_Element_Array_List {$$ = $1;}
	;

Data_Element_Array_List :
	Data_Element_Array_List Data_Element_Array_Element {
			ASTDataDecl* element = (ASTDataDecl*)$1;
			ASTDataDeclExtraArray* extraArray = (ASTDataDeclExtraArray*)$2;
			element->extraArrays.push_back(extraArray);
			element->location = @$;
			$$ = element;}
	| Identifier {
			ASTString* name = (ASTString*)$1;
			ASTDataDecl* element = new ASTDataDecl(@$);
			element->name = name->getValue();
			$$ = element;
			delete name;}
	;

Data_Element_Array_Element :
	LBRACKET Data_Element_Array_Element_Size_List RBRACKET {
		ASTDataDeclExtraArray* extraArray = (ASTDataDeclExtraArray*)$2;
		extraArray->location = @$;
		$$ = extraArray;}
	| LBRACKET RBRACKET {$$ = new ASTDataDeclExtraArray(@$);}
	;

Data_Element_Array_Element_Size_List :
	Data_Element_Array_Element_Size_List COMMA Expression_Constant {
		ASTDataDeclExtraArray* extraArray = (ASTDataDeclExtraArray*)$1;
		ASTExpr* size = (ASTExpr*)$3;
		extraArray->dimensions.push_back(size);
		extraArray->location = @$;
		$$ = extraArray;}
	| Expression_Constant {
		ASTExpr* size = (ASTExpr*)$1;
		ASTDataDeclExtraArray* extraArray = new ASTDataDeclExtraArray(@$);
		extraArray->dimensions.push_back(size);
		$$ = extraArray;}
	;

////////////////////////////////////////////////////////////////
// Function Declaration

Function :
	DataType IDENTIFIER LPAREN Function_Parameters_List RPAREN
		Statement_Block
	{
		ASTDataType* returnType = (ASTDataType*)$1;
		ASTString* name = (ASTString*)$2;
		ASTFuncDecl* func = (ASTFuncDecl*)$4;
		ASTBlock* block = (ASTBlock*)$6;
		func->returnType = returnType;
		func->name = name->getValue();
		func->block = block;
		func->location = @$;
		$$ = func;
		delete name;}
	| DataType IDENTIFIER LPAREN RPAREN Statement_Block {
		ASTDataType* returnType = (ASTDataType*)$1;
		ASTString* name = (ASTString*)$2;
		ASTBlock* block = (ASTBlock*)$5;
		ASTFuncDecl* func = new ASTFuncDecl(@$);
		func->returnType = returnType;
		func->name = name->getValue();
		func->block = block;
		$$ = func;
		delete name;}
	;

Function_Parameters_List :
	Function_Parameters_List COMMA Function_Parameters_Element {
			ASTFuncDecl* func = (ASTFuncDecl*)$1;
			ASTDataDecl* param = (ASTDataDecl*)$3;
			func->parameters.push_back(param);
			func->location = @$;
			$$ = func;}
	| Function_Parameters_Element {
			ASTDataDecl* param = (ASTDataDecl*)$1;
			ASTFuncDecl* func = new ASTFuncDecl(@$);
			func->parameters.push_back(param);
			$$ = func;}
	;

Function_Parameters_Element :
	DataType Data_Element_Array_List {
		ASTDataType* type = (ASTDataType*)$1;
		ASTDataDecl* data = (ASTDataDecl*)$2;
		data->baseType = type;
		data->location = @$;
		$$ = data;}
	;
	
////////////////////////////////////////////////////////////////
// Script Declaration

Script : Script_Type SCRIPT IDENTIFIER Script_Block {
	ASTScriptType* type = (ASTScriptType*)$1;
	ASTString* name = (ASTString*)$3;
	ASTScript* script = (ASTScript*)$4;
	script->type = type;
	script->name = name->getValue();
	script->location = @$;
	$$ = script;
	delete name;}
	;

Script_Type :
	GLOBAL {$$ = new ASTScriptType(ScriptType::global, @$);}
	| FFC {$$ = new ASTScriptType(ScriptType::ffc, @$);}
	| ITEM {$$ = new ASTScriptType(ScriptType::item, @$);}
	| EWEAPON {$$ = new ASTScriptType(ScriptType::eweapon, @$);}
	| LWEAPON {$$ = new ASTScriptType(ScriptType::lweapon, @$);}
	| NPC {$$ = new ASTScriptType(ScriptType::npc, @$);}
	| SCREEN {$$ = new ASTScriptType(ScriptType::screendata, @$);}
	| DMAP {$$ = new ASTScriptType(ScriptType::dmapdata, @$);}
	| LINK {$$ = new ASTScriptType(ScriptType::link, @$);}
	| PLAYER {$$ = new ASTScriptType(ScriptType::player, @$);}
	| IDENTIFIER {
		ASTString* name = static_cast<ASTString*>($1);
		$$ = new ASTScriptType(name->getValue(), @$);
		delete name;}
	;

Script_Block :
	LBRACE Script_Block_List RBRACE {$$ = $2;}
	| LBRACE RBRACE {$$ = new ASTScript(@$);}
	;

Script_Block_List :
	Script_Block_List Script_Block_Element {
		ASTScript* script = (ASTScript*)$1;
		ASTDecl* declaration = (ASTDecl*)$2;
		script->addDeclaration(*declaration);
		script->location = @$;
		$$ = script;}
	| Script_Block_List Option {
		ASTScript* script = (ASTScript*)$1;
		ASTSetOption* option = (ASTSetOption*)$2;
		script->options.push_back(option);
		script->location = @$;
		$$ = script;
		if (!script->variables.empty()
		    || !script->functions.empty()
		    || !script->types.empty()) {
			yymsg("WARNING: Options should come before everything else.");}}
	| Script_Block_Element {
		ASTScript* script = new ASTScript(@$);
		ASTDecl* declaration = (ASTDecl*)$1;
		script->addDeclaration(*declaration);
		$$ = script;}
	| Option {
		ASTScript* script = new ASTScript(@$);
		ASTSetOption* option = (ASTSetOption*)$1;
		script->options.push_back(option);
		$$ = script;}
	;

Script_Block_Element :
	Data SEMICOLON {$$ = $1;}
	| Function {$$ = $1;}
	| DataTypeDef SEMICOLON {$$ = $1;}
	| EXPECTERROR LPAREN Expression_Constant RPAREN Script_Block_Element {
		ASTExprConst* errorId = (ASTExprConst*)$3;
		ASTDecl* declaration = (ASTDecl*)$5;
		declaration->compileErrorCatches.push_back(errorId);
		$$ = declaration;}
	;

////////////////////////////////////////////////////////////////
// Statements

Statement :
	// Declarations
	Data SEMICOLON {$$ = $1;}
	| DataTypeDef SEMICOLON {$$ = $1;}
	// Normal Statements
	| Expression SEMICOLON {$$ = $1;}
	| Statement_Block {$$ = $1;}
	| Statement_If {$$ = $1;}
	| Statement_Switch {$$ = $1;}
	| Statement_For {$$ = $1;}
	| Statement_While {$$ = $1;}
	| Statement_Do {$$ = $1;}
	| Statement_Return SEMICOLON {$$ = $1;}
	| BREAK SEMICOLON {$$ = new ASTStmtBreak(@$);}
	| CONTINUE SEMICOLON {$$ = new ASTStmtContinue(@$);}
	| SEMICOLON {$$ = new ASTStmtEmpty(@$);}
	| Statement_CompileError SEMICOLON {$$ = $1;}
	;

Statement_NoSemicolon:
	// Declarations
	Data {$$ = $1;}
	| DataTypeDef {$$ = $1;}
	// Normal Statements
	| Expression {$$ = $1;}
	| Statement_Block {$$ = $1;}
	| Statement_If {$$ = $1;}
	| Statement_Switch {$$ = $1;}
	| Statement_For {$$ = $1;}
	| Statement_While {$$ = $1;}
	| Statement_Do {$$ = $1;}
	| Statement_Return {$$ = $1;}
	| BREAK {$$ = new ASTStmtBreak(@$);}
	| CONTINUE {$$ = new ASTStmtContinue(@$);}
	| {$$ = new ASTStmtEmpty(@$);}
	| Statement_CompileError {$$ = $1;}
	;

Statement_Block :
	LBRACE Statement_Block_List RBRACE {$$ = $2;}
	| LBRACE RBRACE {$$ = new ASTBlock(@$);}
	;

Statement_Block_List :
	Statement_Block_List Statement {
		ASTBlock* block = (ASTBlock*)$1;
		ASTStmt* stmt = (ASTStmt*)$2;
		block->statements.push_back(stmt);
		$$ = block;}
	| Statement_Block_List Option {
		ASTBlock* block = (ASTBlock*)$1;
		ASTSetOption* option = (ASTSetOption*)$2;
		block->options.push_back(option);
		$$ = block;
		if (!block->statements.empty()) {
			yymsg("WARNING: Options should come before everything else.");}}
	| Statement {
		ASTStmt* stmt = (ASTStmt*)$1;
		ASTBlock* block = new ASTBlock(@$);
		block->statements.push_back(stmt);
		$$ = block;}
	| Option {
		ASTSetOption* option = (ASTSetOption*)$1;
		ASTBlock* block = new ASTBlock(@$);
		block->options.push_back(option);
		$$ = block;}
	;

Statement_If :
	IF LPAREN Expression RPAREN Statement {
		ASTExpr* cond = (ASTExpr*)$3;
		ASTStmt* stmt = (ASTStmt*)$5;
		$$ = new ASTStmtIf(cond, stmt, @$);}
	| IF LPAREN Expression RPAREN Statement ELSE Statement {
		ASTExpr* test = (ASTExpr*)$3;
		ASTStmt* thenStatement = (ASTStmt*)$5;
		ASTStmt* elseStatement = (ASTStmt*)$7;
		$$ = new ASTStmtIfElse(test, thenStatement, elseStatement, @$);}
	;

Statement_Switch :
	SWITCH LPAREN Expression RPAREN LBRACE Statement_Switch_Body RBRACE {
		ASTExpr* key = (ASTExpr*)$3;
		ASTStmtSwitch* sw = (ASTStmtSwitch*)$6;
		sw->key = key;
		$$ = sw;}
	;

Statement_Switch_Body :
	Statement_Switch_Body Statement_Switch_Cases Statement_Block_List {
		ASTStmtSwitch* sw = (ASTStmtSwitch*)$1;
		ASTSwitchCases* cases = (ASTSwitchCases*)$2;
		ASTBlock* block = (ASTBlock*)$3;
		cases->block = block;
		sw->cases.push_back(cases);
		$$ = sw;}
	| Statement_Switch_Cases Statement_Block_List {
		ASTStmtSwitch* sw = new ASTStmtSwitch(@$);
		ASTSwitchCases* cases = (ASTSwitchCases*)$1;
		ASTBlock* block = (ASTBlock*)$2;
		cases->block = block;
		sw->cases.push_back(cases);
		$$ = sw;}
	;
	
Statement_Switch_Cases :
	Statement_Switch_Cases CASE Expression_Constant COLON {
		ASTSwitchCases* cases = (ASTSwitchCases*)$1;
		ASTExprConst* key = (ASTExprConst*)$3;
		cases->cases.push_back(key);
		$$ = cases;}
	| Statement_Switch_Cases DEFAULT COLON {
		ASTSwitchCases* cases = (ASTSwitchCases*)$1;
		cases->isDefault = true;
		$$ = cases;}
	| CASE Expression_Constant COLON {
		ASTSwitchCases* cases = new ASTSwitchCases(@$);
		ASTExprConst* key = (ASTExprConst*)$2;
		cases->cases.push_back(key);
		$$ = cases;}
	| DEFAULT COLON {
		ASTSwitchCases* cases = new ASTSwitchCases(@$);
		cases->isDefault = true;
		$$ = cases;}
	;

Statement_For :
	FOR LPAREN
		Statement_NoSemicolon SEMICOLON
		Expression SEMICOLON
		Statement_NoSemicolon RPAREN
		Statement
	{
		ASTStmt* setup = (ASTStmt*)$3;
		ASTExpr* test = (ASTExpr*)$5;
		ASTStmt* increment = (ASTExpr*)$7;
		ASTStmt* body = (ASTStmt*)$9;
		$$ = new ASTStmtFor(setup, test, increment, body, @$);
	}
	;

Statement_While :
	WHILE LPAREN Expression RPAREN Statement {
		ASTExpr* test = (ASTExpr*)$3;
		ASTStmt* body = (ASTStmt*)$5;
		$$ = new ASTStmtWhile(test, body, @$);}
	;
	
Statement_Do :
	DO Statement WHILE LPAREN Expression RPAREN {
		ASTStmt* body = (ASTStmt *)$2;
		ASTExpr* test = (ASTExpr*)$5;
		$$ = new ASTStmtDo(test, body, @$);}
	;


Statement_Return :
	RETURN Expression {
		ASTExpr* value = (ASTExpr*)$2;
		$$ = new ASTStmtReturnVal(value, @$);}
	| RETURN {$$ = new ASTStmtReturn(@$);}
	;
	
Statement_CompileError :
	EXPECTERROR LPAREN Expression_Constant RPAREN Statement_NoSemicolon {
		ASTExprConst* errorId = (ASTExprConst*)$3;
		ASTStmt* statement = (ASTStmt*)$5;
		statement->compileErrorCatches.push_back(errorId);
		$$ = statement;}
	;

////////////////////////////////////////////////////////////////
// Expression Helpers

Identifier_List :
	Identifier_List DOT Identifier {
		ASTExprIdentifier* identifier = (ASTExprIdentifier*)$1;
		ASTString* name = (ASTString*)$3;
		identifier->components.push_back(name->getValue());
		identifier->location = @$;
		$$ = identifier;
		delete name;}
	| Identifier {
		ASTString* name = (ASTString*)$1;
		$$ = new ASTExprIdentifier(name->getValue(), @$);
		delete name;}
	;

Identifier :
	IDENTIFIER {$$ = $1;}
	| BITMAP {$$ = new ASTString("bitmap", @$);}
	| CHEAT {$$ = new ASTString("cheat", @$);}
	| COMBO {$$ = new ASTString("combo", @$);}
	| DOORSET {$$ = new ASTString("doorset", @$);}
	| DROPSET {$$ = new ASTString("dropset", @$);}
	| DMAP {$$ = new ASTString("dmap", @$);}
	| EWEAPON {$$ = new ASTString("eweapon", @$);}
	| FFC {$$ = new ASTString("ffc", @$);}
	| GAMEDATA {$$ = new ASTString("gamedata", @$);}
	| ITEM {$$ = new ASTString("item", @$);}
	| ITEMCLASS {$$ = new ASTString("itemdata", @$);}
	| LWEAPON {$$ = new ASTString("lweapon", @$);}
	| MAP {$$ = new ASTString("map", @$);}
	| MESSAGE {$$ = new ASTString("message", @$);}
	| MISCCOLOR {$$ = new ASTString("misccolor", @$);}
	| NPC {$$ = new ASTString("npc", @$);}
	| NPCDATA {$$ = new ASTString("npcdata", @$);}
	| PALCYCLE {$$ = new ASTString("palcycle", @$);}
	| PALETTE {$$ = new ASTString("palette", @$);}
	| POND {$$ = new ASTString("pond", @$);}
	| RGB {$$ = new ASTString("rgb", @$);}
	| SHOP {$$ = new ASTString("shop", @$);}
	| SPRITE {$$ = new ASTString("sprite", @$);}
	| TUNE {$$ = new ASTString("tune", @$);}
	| WARPRING {$$ = new ASTString("warpring", @$);}
	;

Expr_2_Call :
	Expr_2 LPAREN RPAREN {
		ASTExprCall* call = new ASTExprCall(@$);
		ASTExpr* left = (ASTExpr*)$1;
		call->left = left;
		call->location = @$;
		$$ = call;}
	| Expr_2 LPAREN Expr_2_Call_Parameters RPAREN {
		ASTExpr* left = (ASTExpr*)$1;
		ASTExprCall* call = (ASTExprCall*)$3;
		call->left = left;
		call->location = @$;
		$$ = call;}
	;

Expr_2_Call_Parameters :
	Expr_2_Call_Parameters COMMA Expression {
		ASTExprCall* call = (ASTExprCall*)$1;
		ASTExpr* e = (ASTExpr*)$3;
		call->parameters.push_back(e);
		call->location = @$;
		$$ = call;}
	| Expression {
		ASTExprCall* call = new ASTExprCall(@$);
		ASTExpr* e = (ASTExpr*)$1;
		call->parameters.push_back(e);
		$$ = call;}
	;

////////////////////////////////////////////////////////////////
// Expressions - in order of precedence.
//   (Roughly following http://en.cppreference.com/w/cpp/language/operator_precedence).

Expr_1 :
	Identifier_List {$$ = $1;}
	| Literal {$$ = $1;}
	| LPAREN Expression RPAREN {$$ = $2;}
	;

Expr_2 : Expr_1 {$$ = $1;}
  // Post Increment
	| Expr_2 INCREMENT {POSTFIX(ASTExprIncrement, $$, $1, @$)}
  // Post Decrement
	| Expr_2 DECREMENT {POSTFIX(ASTExprDecrement, $$, $1, @$)}
  // Function Call
	| Expr_2_Call {$$ = $1;}
	// Subscript
	| Expr_2 LBRACKET Expression RBRACKET {
		BINARY(ASTExprIndex, $$, $1, $3, @$);}
	// Access
	| Expr_2 ARROW IDENTIFIER {
			ASTExpr* left = (ASTExpr*)$1;
			ASTString* right = (ASTString*)$3;
			$$ = new ASTExprArrow(left, right->getValue(), @$);
			delete right;}
	;

Expr_3 : Expr_2 {$$ = $1;}
	// Pre Increment
	| INCREMENT Expr_3 {PREFIX(ASTExprPreIncrement, $$, $2, @$)}
	// Pre Decrement
	| DECREMENT Expr_3 {PREFIX(ASTExprPreDecrement, $$, $2, @$)}
	// Unary Minus
	| MINUS Expr_3 {PREFIX(ASTExprNegate, $$, $2, @$)}
	// Logical Not
	| NOT Expr_3 {PREFIX(ASTExprNot, $$, $2, @$)}
	// Bitwise Not
	| BITNOT Expr_3 {PREFIX(ASTExprBitNot, $$, $2, @$)}
	;

Expr_4 : Expr_3 {$$ = $1;} // None used.

Expr_5 : Expr_4 {$$ = $1;}
	// Multiplication
	| Expr_5 TIMES Expr_4 {BINARY(ASTExprTimes, $$, $1, $3, @$)}
	// Division
	| Expr_5 DIVIDE Expr_4 {BINARY(ASTExprDivide, $$, $1, $3, @$)}
	// Remainder
	| Expr_5 MODULO Expr_4 {BINARY(ASTExprModulo, $$, $1, $3, @$)}
	;

Expr_6 : Expr_5 {$$ = $1;}
	// Addition
	| Expr_6 PLUS Expr_5 {BINARY(ASTExprPlus, $$, $1, $3, @$)}
	// Subtraction
	| Expr_6 MINUS Expr_5 {BINARY(ASTExprMinus, $$, $1, $3, @$)}
	;

Expr_7 : Expr_6 {$$ = $1;}
	// Left Shift
	| Expr_7 LSHIFT Expr_6 {BINARY(ASTExprLShift, $$, $1, $3, @$)}
	// Right Shift
	| Expr_7 RSHIFT Expr_6 {BINARY(ASTExprRShift, $$, $1, $3, @$)}
	;

Expr_8 : Expr_7 {$$ = $1;}
	// Less Than
	| Expr_8 LT Expr_7 {BINARY(ASTExprLT, $$, $1, $3, @$)}
	// Less Than or Equal
	| Expr_8 LE Expr_7 {BINARY(ASTExprLE, $$, $1, $3, @$)}
	// Greater Than
	| Expr_8 GT Expr_7 {BINARY(ASTExprGT, $$, $1, $3, @$)}
	// Greater Than or Equal
	| Expr_8 GE Expr_7 {BINARY(ASTExprGE, $$, $1, $3, @$)}
	;

Expr_9 : Expr_8 {$$ = $1;}
	// Equality
	| Expr_9 EQ Expr_8 {BINARY(ASTExprEQ, $$, $1, $3, @$)}
	// Inequality
	| Expr_9 NE Expr_8 {BINARY(ASTExprNE, $$, $1, $3, @$)}
	;

Expr_10 : Expr_9 {$$ = $1;}
	// Bitwise And
	| Expr_10 BITAND Expr_9 {BINARY(ASTExprBitAnd, $$, $1, $3, @$)}
	;

Expr_11 : Expr_10 {$$ = $1;}
	// Bitwise Xor
	| Expr_11 BITXOR Expr_10 {BINARY(ASTExprBitXor, $$, $1, $3, @$)}
	;

Expr_12 : Expr_11 {$$ = $1;}
	// Bitwise Or
	| Expr_12 BITOR Expr_11 {BINARY(ASTExprBitOr, $$, $1, $3, @$)}
	;

Expr_13 : Expr_12 {$$ = $1;}
	// Logical And
	| Expr_13 AND Expr_12 {BINARY(ASTExprAnd, $$, $1, $3, @$)}
	;

Expr_14 : Expr_13 {$$ = $1;}
	// Logical Or
	| Expr_14 OR Expr_13 {BINARY(ASTExprOr, $$, $1, $3, @$)}
	;
	
Expr_15 : Expr_14 {$$ = $1;}
	//Ternary
	| Expr_14 QMARK Expr_15 COLON Expr_15
	{
		ASTExpr* left = (ASTExpr*)$1;
		ASTExpr* middle = (ASTExpr*)$3;
		ASTExpr* right = (ASTExpr*)$5;
		$$ = new ASTTernaryExpr(left, middle, right, @$);
	}
	;

Expr_16 : Expr_15 {$$ = $1;}
	// Assignment
	| Expr_15 ASSIGN Expr_16 {BINARY(ASTExprAssign, $$, $1, $3, @$)}
	// Addition Assignment
	| Expr_15 PLUSASSIGN Expr_16 {SHORTCUT(ASTExprPlus, $$, $1, $3, @$, @3)}
	// Subtraction Assignment
	| Expr_15 MINUSASSIGN Expr_16 {SHORTCUT(ASTExprMinus, $$, $1, $3, @$, @3)}
	// Multiplication Assignment
	| Expr_15 TIMESASSIGN Expr_16 {SHORTCUT(ASTExprTimes, $$, $1, $3, @$, @3)}
	// Division Assignment
	| Expr_15 DIVIDEASSIGN Expr_16 {SHORTCUT(ASTExprDivide, $$, $1, $3, @$, @3)}
	// Modulus Assignment
	| Expr_15 MODULOASSIGN Expr_16 {SHORTCUT(ASTExprModulo, $$, $1, $3, @$, @3)}
	// Left Shift Assignment
	| Expr_15 LSHIFTASSIGN Expr_16 {SHORTCUT(ASTExprLShift, $$, $1, $3, @$, @3)}
	// Right Shift Assignment
	| Expr_15 RSHIFTASSIGN Expr_16 {SHORTCUT(ASTExprRShift, $$, $1, $3, @$, @3)}
	// Bitwise And Assignment
	| Expr_15 BITANDASSIGN Expr_16 {SHORTCUT(ASTExprBitAnd, $$, $1, $3, @$, @3)}
	// Bitwise Xor Assignment
	| Expr_15 BITXORASSIGN Expr_16 {SHORTCUT(ASTExprBitXor, $$, $1, $3, @$, @3)}
	// Bitwise Or Assignment
	| Expr_15 BITORASSIGN Expr_16 {SHORTCUT(ASTExprBitOr, $$, $1, $3, @$, @3)}
	// Logical And Assignment
	| Expr_15 ANDASSIGN Expr_16 {SHORTCUT(ASTExprAnd, $$, $1, $3, @$, @3)}
	// Logical Or Assignment
	| Expr_15 ORASSIGN Expr_16 {SHORTCUT(ASTExprOr, $$, $1, $3, @$, @3)}
		 ;

Expression : Expr_16 {$$ = $1;};

Expression_Constant :
	Expression {
		ASTExpr* content = (ASTExpr*)$1;
		$$ = new ASTExprConst(content, @$);}
	;

////////////////////////////////////////////////////////////////
// Literals

Literal :
	NUMBER {
		ASTFloat* val = (ASTFloat*)$1;
		$$ = new ASTNumberLiteral(val, @$);}
	| SINGLECHAR {
		ASTString* as = (ASTString*)$1;
		char val[15];
		sprintf(val, "%d", as->getValue().at(1));
		ASTFloat* number = new ASTFloat(val, (ASTFloat::Type)0, @$);
		$$ = new ASTNumberLiteral(number, @$);}
	| Literal_String {$$ = $1;}
	| Literal_Bool {$$ = $1;}
	| Literal_Array {$$ = $1;}
	| OPTIONVALUE LPAREN IDENTIFIER RPAREN {
		ASTString* name = (ASTString*)$3;
		$$ = new ASTOptionValue(name->getValue(), @$);
		delete name;}
	;

Literal_String :
	Literal_String QUOTEDSTRING {
		ASTStringLiteral* str = (ASTStringLiteral*)$1;
		ASTString* rawstr = (ASTString*)$2;
		str->value += rawstr->getValue();
		delete rawstr;
		$$ = str;}
	| QUOTEDSTRING {
		ASTString* rawstring = (ASTString*)$1;
		ASTStringLiteral* str = new ASTStringLiteral(*rawstring);
		delete rawstring;
		$$ = str;}


Literal_Bool :
	ZTRUE {$$ = new ASTBoolLiteral(true, @$);}
	| ZFALSE {$$ = new ASTBoolLiteral(false, @$);}
	;

Literal_Array :
	// (int[5]){1, 2, 3}
	LPAREN DataType LBRACKET Expression_Constant RBRACKET RPAREN
		  LBRACE Literal_Array_Body RBRACE
	{
		ASTDataType* type = (ASTDataType*)$2;
		ASTExpr* size = (ASTExpr*)$4;
		ASTArrayLiteral* al = (ASTArrayLiteral*)$8;
		al->type = type;
		al->size = size;
		al->location = @$;
		$$ = al;
	}
	// (int[]){1, 2, 3}
	| LPAREN DataType LBRACKET RBRACKET RPAREN
		  LBRACE Literal_Array_Body RBRACE
	{
		ASTDataType* type = (ASTDataType*)$2;
		ASTArrayLiteral* al = (ASTArrayLiteral*)$7;
		al->type = type;
		al->location = @$;
		$$ = al;
	}
	// (int[5]){}
	| LPAREN DataType LBRACKET Expression_Constant RBRACKET
		  RPAREN LBRACE RBRACE
	{
		ASTDataType* type = (ASTDataType*)$2;
		ASTExpr* size = (ASTExpr*)$4;
		ASTArrayLiteral* al = new ASTArrayLiteral(@$);
		al->type = type;
		al->size = size;
		$$ = al;
	}
	/*0-sized arrays should not be allowed!!
	// (int[]){}
	| LPAREN DataType LBRACKET RBRACKET RPAREN LBRACE RBRACE {
		ASTDataType* type = (ASTDataType*)$2;
		ASTArrayLiteral* al = new ASTArrayLiteral(@$);
		al->type = type;
		$$ = al;}*/
	// {1, 2, 3}
	| LBRACE Literal_Array_Body RBRACE {
		ASTArrayLiteral* al = (ASTArrayLiteral*)$2;
		al->location = @$;
		$$ = al;}
	;

Literal_Array_Body :
	Literal_Array_Body COMMA Expression {
		ASTArrayLiteral* al = (ASTArrayLiteral*)$1;
		ASTExpr* element = (ASTExpr*)$3;
		al->elements.push_back(element);
		$$ = al;}
	| Expression {
		ASTExpr* element = (ASTExpr*)$1;
		ASTArrayLiteral* al = new ASTArrayLiteral(@$);
		al->elements.push_back(element);
		$$ = al;}
	;

////////////////////////////////////////////////////////////////

%%

/*        programs */

void yymsg(string const& message, int row, int col)
{
	ostringstream out;
	out << message << " [";
	if (curfilename != "tmp")
		out << curfilename << " ";
	out << "Line " << yyrow << " "
	    << "Column " << yycol;
	if (yyleng)
	    out << " '" << yytext << "'";
	out << "]";
	box_out(out.str().c_str());
    box_eol();
}

void yyerror(ASTFile*&, const char *s) {
	yymsg(s);
}

namespace ZScript
{
	ASTFile* parseFile(std::string const& filename)
	{
		ASTFile* result = NULL;

		// Reset lexer.
		yyin = NULL;
		resetLexer();

		// Read in the file.
		yyin = fopen(filename.c_str(), "r");
		if (!yyin)
		{
			box_out("Can't open input file");
			box_eol();
			return NULL;
		}
		curfilename = filename;

		// Run the parser.
		if (yyparse(result))
		{
			delete result;
			result = NULL;
		}
		fclose(yyin);
		
		return result;
	}
};
