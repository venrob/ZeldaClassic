//Classic.zh

import "ffcscript.zh"
import "stdExtra.zh"
import "ghost.zh"
import "tango.zh"

const int __CLASSIC_ZH_VERSION = 2.02; 

import "demo_scripts/npc_scripts/bobomb.zs"
import "demo_scripts/npc_scripts/daira.zs"
import "demo_scripts/eweapon_scripts/daira_axe.zs"
import "demo_scripts/eweapon_scripts/ewZigZag.zs"
import "demo_scripts/lweapon_scripts/lwZigZag.zs"
import "demo_scripts/lweapon_scripts/lwBombArrow.zs"
import "demo_scripts/lweapon_scripts/replaceOnDeath.zs"
import "demo_scripts/lweapon_scripts/firerod.zs"
import "demo_scripts/lweapon_scripts/mobileBait.zs"

const int I_HALFMAGIC 					= 144;
const int I_LEARNSLASH 					= 143;

const int I_MAGICBOSSKEY 				= 146;
const int I_MAGICMAP 					= 147;
const int I_MAGICCOMPASS 				= 148;


const int NPC_DAIRA1 					= 177;
const int NPC_DAIRA2 					= 178;

const int _classic_zh__BOSS_EXPLODE_SPRITE 		= 88;
const int _classic_zh__BOSS_EXPLODE_DUR 		= 150;
const int _classic_zh__BOSS_EXPLODE_SFX 		= 61;
const int _classic_zh__BOSS_EXPLODE_DELAY 		= 16;
const int _classic_zh__BOSS_EXPLODE_RANDOM_MIN 		= -10;
const int _classic_zh__BOSS_EXPLODE_RANDOM_MAX 		= 10;


const int _classic_zh__TRK_BOSS 			= 25;
const int _classic_zh__MIDI_VICTORY 			= 1;
const int _classic_zh__TILE_FIREWORK 			= 10140;

const int _classic_zh__REG_BOSS_EXPLODING 		= 1;
const int _classic_zh__REG_BOSS_DEAD 			= 2;
const int _classic_zh__REG_BOSS_DROPPED_HEART 		= 3;
const int _classic_zh__REG_BOSS_DROPPED_TRIFORCE 	= 4;

const int CMB_INVISIBLE 				= 1;

item script HalfMagic
{
	void run()
	{
		Game->Generic[GEN_MAGICDRAINRATE] = 1;
	}
}

item script LearnSlash
{
	void run()
	{
		Game->Generic[GEN_CANSLASH] = 1;
	}
}

item script ItemMessage
{
	void run(int m)
	{
		Screen->Message(m);
	}
}

item script ItemSound
{
	void run(int s)
	{
		Game->PlaySound(s);
	}
}

ffc script BossMusic
{
	void run(int reg, int origtile, int mid, int trk)
	{
		this->Data = CMB_INVISIBLE;
		if ( Screen->D[reg] >= _classic_zh__REG_BOSS_DEAD ) Quit(); //Don't play victory music if we return to the screen.
		if ( origtile < 1 ) origtile = _classic_zh__TILE_FIREWORK;
		if ( trk < 1 ) trk = _classic_zh__TRK_BOSS;
		if ( mid < 1 ) mid = _classic_zh__MIDI_VICTORY;
		int filenm[]="Classic.nsf";
		Waitframes(5);
		Game->PlayEnhancedMusic(filenm,trk);
		while(EnemiesAlive()) Waitframe();
		//for ( int q = Screen->NumLWeapons(); q > 0; --q ) //the number changes, so we need to refresh...
		for ( int q = 1; q < Screen->NumLWeapons(); ++q ) 
		{
			lweapon isFirework = Screen->LoadLWeapon(q);
			if ( isFirework->OriginalTile == origtile ) 
			{
				while(isFirework->isValid()) Waitframe();
				
			}
		}
		Game->PlayMIDI(mid);
		for ( int q = 0; q < 601; ++q ) Waitframe();
		Game->PlayMIDI(Game->DMapMIDI[Game->GetCurDMap()]);	
		Screen->D[reg] = _classic_zh__REG_BOSS_DEAD;
	}
}

ffc script BossExplode
{
	void run(int reg, int spr, int dur, int sfx, int delay, int rmin, int rmax)
	{
		this->Data = CMB_INVISIBLE;
		int type;
		if ( spr < 1 ) spr = _classic_zh__BOSS_EXPLODE_SPRITE;
		if ( dur < 1 ) dur = _classic_zh__BOSS_EXPLODE_DUR;
		if ( sfx < 1 ) sfx = _classic_zh__BOSS_EXPLODE_SFX;
		if ( delay < 1 ) delay = _classic_zh__BOSS_EXPLODE_DELAY;
		if ( rmin < 1 ) rmin = _classic_zh__BOSS_EXPLODE_RANDOM_MIN;
		if ( rmax < 1 ) rmax = _classic_zh__BOSS_EXPLODE_RANDOM_MAX;
		Waitframes(5);
		npc boss; int x; int y; int width; int height; bool alive = true;
		for ( int q = Screen->NumNPCs(); q > 0; --q )
		{
			npc n = Screen->LoadNPC(q);
			if ( _classic_zh__isBoss(n) ) 
			{
				boss = n; 
				width = n->TileWidth;
				height = n->TileHeight;
				x = n->X;
				y = n->Y;
				type = boss->Type;
				break;
			}
			
		}
		if ( !(boss->isValid()) ) Quit();
		while(alive)
		{
			while(boss->isValid()) //boss->HP > 0)
			{
				x = boss->X; Trace(x);
				y = boss->Y; Trace(y);
				Waitframe();
				continue;
			}
			//Check for more pieces of the boss
			if ( EnemiesAlive() )
			{
				//Find the next piece of it
				for ( int q = Screen->NumNPCs(); q > 0; --q )
				{
					npc n = Screen->LoadNPC(q);
					if ( n->Type == type ) 
					{
						boss = n; 
						width = n->TileWidth;
						height = n->TileHeight;
						x = n->X;
						y = n->Y;
						type = boss->Type;
						break;
					}
					
				}
			}
			else { alive = false; break; }
			Waitframe();
		}
			
		Screen->D[reg] = _classic_zh__REG_BOSS_EXPLODING;
		for ( int q = dur; q > 0; --q )
		{
			//do explosions
			Game->PlaySound(sfx);
			lweapon l = Screen->CreateLWeapon(LW_SPARKLE);
			l->CollDetection = false;
			l->UseSprite(spr);
			l->X = x+(Rand((rmin-width), rmax+width));
			l->Y = y+(Rand((rmin-height), rmax+height));
			//wait n frames between explosions
			for ( int w = 0; q < delay; ++w )
			{
				Waitframe(); //--q; //Increment the main loop at the same time.
			}
			Waitframe();
		}
		Screen->D[reg] = _classic_zh__REG_BOSS_DEAD;
		Quit();
		
	}
}

bool _classic_zh__isBoss(npc n)
{
	if ( n->Type == NPCT_AQUAMENTUS ) return true;
	if ( n->Type == NPCT_MOLDORM ) return true;
	if ( n->Type == NPCT_DODONGO ) return true;
	if ( n->Type == NPCT_GLEEOK ) return true;
	if ( n->Type == NPCT_DIGDOGGER ) return true;
	if ( n->Type == NPCT_GOHMA ) return true;
	if ( n->Type == NPCT_LANMOLA ) return true;
	if ( n->Type == NPCT_MANHANDLA ) return true;
	if ( n->Type == NPCT_PATRA ) return true;
	if ( n->Type == NPCT_GANON ) return true;
	return false;
}
const int _classic_zh__SIGNPOST_DIST = 16;
ffc script SignPost
{
	void run(int m, int max_dist)
	{
		this->Data = CMB_INVISIBLE;
		if ( max_dist < 1 ) max_dist = _classic_zh__SIGNPOST_DIST;
		while(1)
		{
			if ( Below(this) )
			{
				//Trace(1);
				if ( Facing(this) )
				{
					//Trace(2);
					if ( DistXY(this, max_dist) )
					{
						//Trace(3);
						if ( Link->PressA || Link->PressB )
						{
							Screen->Message(m);
						}
					}
				}
			}
			//if ( Link->Y > this->Y + 8 )
			//{
			//	if ( Abs(Link->X-this->X) < 8 )
			//	{
			//		if ( Link->PressA || Link->PressB )
			//		{
			//			Screen->Message(m);
			//		}
			//	}
			//}
			Waitframe();
		}
	}
}

//ffc script PermSecrets
//{
//    void run(int reg)
//    {
//        while(1)
//        {
//            if ( !Screen->D[reg] )
//            {
//                if ( Screen->State[ST_SECRET] ) 
//                {
//                    Screen->D[reg] = 1;
//                }
//            }
//            else 
//            {
//                Screen->TriggerSecrets();
//                Quit();
//            }
//            Waitframe();
//        }
//    }
//}

ffc script ChangeRoomGuy
{
	void run(int t, int cs)
	{
		this->Data = CMB_INVISIBLE;
		if ( t < 0 ) Quit();
		Waitframes(4);
		for ( int q = Screen->NumNPCs(); q > 0; --q )
		{
			npc g = Screen->LoadNPC(q);
			if ( g->Type == NPCT_GUY )
			{
				g->OriginalTile = t;
				if ( cs > 0 ) 
					g->CSet = cs;
				break;
			}
		}
	}
}

ffc script PermBlockSecrets
{
	void run(int reg)
	{
		this->Data = CMB_INVISIBLE;
		int cnt;
		while(1)
		{
			if ( Screen->D[reg] )
			{
				Screen->State[ST_SECRET] = true;
				Screen->TriggerSecrets();
				Game->PlaySound(SFX_SECRET);
				Quit();
			}
			cnt = 0; 
			for ( int q = 0; q < 176; ++q )
			{
				if ( Screen->ComboF[q] == CF_BLOCKTRIGGER ) ++cnt;
				if ( Screen->ComboI[q] == CF_BLOCKTRIGGER ) ++cnt;
			}
			if ( !cnt ) 
			{
				Screen->State[ST_SECRET] = true;
				Screen->D[reg] = 1; 
				break;
			}
			Waitframe(); 
		}
				
		//count the number of block triggers on the screen
		//then, if there are none, set the screen state
		
	}
}

ffc script PermBlockShutters
{
	void run(int reg)
	{
		this->Data = CMB_INVISIBLE;
		int cnt;
		while(1)
		{
			if ( Screen->D[reg] )
			{
				Game->PlaySound(SFX_SECRET);
				//Screen->Flags[SF_SECRETS] &= ~1;
				for ( int q = 0; q < 4; ++q )
				{
					if ( Screen->Door[q] == D_SHUTTER ) Screen->Door[q] = D_OPEN;
				}
				Quit();
			}
			cnt = 0; 
			for ( int q = 0; q < 176; ++q )
			{
				if ( Screen->ComboF[q] == CF_BLOCKTRIGGER ) ++cnt;
				if ( Screen->ComboI[q] == CF_BLOCKTRIGGER ) ++cnt;
			}
			if ( !cnt ) 
			{
				Screen->State[ST_SECRET] = true;
				Screen->D[reg] = 1; 
				break;
			}
			Waitframe(); 
		}
				
		//count the number of block triggers on the screen
		//then, if there are none, set the screen state
		
	}
}

global script Active
{
    void run()
    {
        StartGhostZH();
        Tango_Start();
	    
        while(true)
        {
            UpdateGhostZH1();
	    Tango_Update1();
            Waitdraw();
            UpdateGhostZH2();
	    Tango_Update2();
            Waitframe();
        }
    }
}

ffc script DropTRIFORCE
{
	void run(int reg, int min)
	{
		this->Data = CMB_INVISIBLE;
		if ( Screen->D[reg] >= _classic_zh__REG_BOSS_DROPPED_TRIFORCE ) Quit();
		if ( min < 1 ) min = _classic_zh__REG_BOSS_DROPPED_HEART;
		item hc = Screen->CreateItem(I_TRIFORCE);
		int yy;
		hc->X = 1; hc->Y = 1; hc->DrawYOffset = -10000; hc->HitYOffset = -10000; hc->Z = 256;
		while ( Screen->D[reg] < min ) { hc->Z = 256; Waitframe(); }
		//boss is dead. Position the heart container over Link.
		hc->X = (Clamp(Link->X, 0, 250)); yy = (Clamp(Link->Y, 0, 150)); //Don't drop partway offscreen.
		hc->Y = yy;
		hc->DrawYOffset = 0; hc->HitYOffset = 0; 
		lweapon shadow = Screen->CreateLWeapon(LW_SCRIPT1);
		shadow->UseSprite(50);
		shadow->X = hc->X; shadow->Y = yy+8;
		shadow->CollDetection = false;
		while(hc->isValid())
		{
			if ( hc->Z > 8 ) ++hc->Z; //Slow its descent. 
			if ( hc->Z == 0 && hc->Jump < 0.4) Remove(shadow);
			if ( Collision(hc) ) Screen->D[reg] = _classic_zh__REG_BOSS_DROPPED_TRIFORCE; //If Link touches it. 
			Waitframe();
			
		}
		Screen->D[reg] = _classic_zh__REG_BOSS_DROPPED_TRIFORCE;
	}	
}

ffc script DropHEARTCONTAINER
{
	void run(int reg, int min)
	{
		this->Data = CMB_INVISIBLE;
		if ( Screen->D[reg] >= _classic_zh__REG_BOSS_DROPPED_HEART ) Quit();
		if ( min < 1 ) min = _classic_zh__REG_BOSS_DEAD;
		item hc = Screen->CreateItem(I_HEARTCONTAINER);
		int yy;
		hc->X = 1; hc->Y = 1; hc->DrawYOffset = -10000; hc->HitYOffset = -10000; hc->Z = 256;
		while ( Screen->D[reg] < min ) { hc->Z = 256; Waitframe();}
		//boss is dead. Position the heart container over Link.
		hc->X = (Clamp(Link->X, 0, 250)); yy = (Clamp(Link->Y, 0, 150)); //Don't drop partway offscreen.
		hc->Y = yy;
		hc->DrawYOffset = 0; hc->HitYOffset = 0; 
		lweapon shadow = Screen->CreateLWeapon(LW_SCRIPT1);
		shadow->UseSprite(50);
		shadow->X = hc->X; shadow->Y = yy+8;
		shadow->CollDetection = false;
		while(hc->isValid())
		{
			if ( hc->Z > 8 ) ++hc->Z; //Slow its descent. 
			if ( hc->Z == 0 && hc->Jump < 0.4) Remove(shadow); 
			Waitframe();
		}
		Screen->D[reg] = _classic_zh__REG_BOSS_DROPPED_HEART;
	}	
}


//Collect script for Magic Boss Key--works in a levels
item script MagicBossKey
{
	void run()
	{
		for ( int q = 0; q < 512; ++q )
		{
			Game->LItems[q] |= LI_BOSSKEY;
		}
	}
}

//Collect script for Magic Map--works in a levels
item script MagicMap
{
	void run()
	{
		for ( int q = 0; q < 512; ++q )
		{
			Game->LItems[q] |= LI_MAP;
		}
	}
}

//Collect script for Magic Compass-works in all levels
item script MagicCompass
{
	void run()
	{
		for ( int q = 0; q < 512; ++q )
		{
			Game->LItems[q] |= LI_COMPASS;
		}
	}
}